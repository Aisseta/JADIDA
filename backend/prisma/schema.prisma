generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id_user               Int        @id @default(autoincrement())
  url_photo_profil      String?
  lastname              String
  firstname             String
  role                  String
  pseudo                String     @unique
  sexe                  String
  email                 String     @unique
  password              String
  address               String?
  city                  String?
  description           String?
  createdAt             DateTime   @default(now())
  acceptedPrivacyPolicy Boolean    @default(false)
  clothings             Clothing[]
  transactions          Transaction[]
  evaluations           Evaluation[]
  exchangesRequested    Exchange[] @relation("Requester")
  exchangesOwned        Exchange[] @relation("Owner")
}

model Clothing {
  id_clothing         Int      @id @default(autoincrement())
  name                String
  size                String
  brand               String
  material            String
  condition           String
  main_image_url      String
  secondary_image_url String?
  third_image_url     String?
  value_jadis         Float    @default(0)
  is_available        Boolean  @default(true)
  date_added          DateTime @default(now())
  user                User     @relation(fields: [user_id], references: [id_user])
  user_id             Int
  transactions        Transaction[]
  receivedInExchange  Exchange[] @relation("ReceivedClothing")
  exchangedInExchange Exchange[] @relation("ExchangedClothing")
}

model Transaction {
  id_transaction   Int         @id @default(autoincrement())
  user             User        @relation(fields: [user_id], references: [id_user])
  user_id          Int
  clothing         Clothing    @relation(fields: [clothing_id], references: [id_clothing])
  clothing_id      Int
  amount_jadis     Float
  transaction_date DateTime    @default(now())
  evaluations      Evaluation[]
}

model Exchange {
  id_exchange           Int      @id @default(autoincrement())
  clothing_received     Clothing @relation("ReceivedClothing", fields: [clothing_received_id], references: [id_clothing])
  clothing_received_id  Int
  clothing_exchanged    Clothing @relation("ExchangedClothing", fields: [clothing_exchanged_id], references: [id_clothing])
  clothing_exchanged_id Int
  requester             User     @relation("Requester", fields: [requester_id], references: [id_user])
  requester_id          Int
  owner                 User     @relation("Owner", fields: [owner_id], references: [id_user])
  owner_id              Int
  status                String
  exchange_date         DateTime @default(now())
}

model Evaluation {
  id_evaluation   Int         @id @default(autoincrement())
  note            Int
  commentaire     String?
  createdAt       DateTime    @default(now())
  user            User        @relation(fields: [user_id], references: [id_user])
  user_id         Int
  transaction     Transaction @relation(fields: [transaction_id], references: [id_transaction])
  transaction_id  Int
}





